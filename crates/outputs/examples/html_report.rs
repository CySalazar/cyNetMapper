//! HTML report example for cyNetMapper
//! 
//! This example demonstrates HTML report generation with templating.

use cynetmapper_outputs::*;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("HTML report example");
    
    // Example scan results data
    let scan_results = vec![
        ("192.168.1.1", "Linux", vec![(22, "ssh", "OpenSSH 8.0"), (80, "http", "Apache 2.4"), (443, "https", "Apache 2.4")]),
        ("192.168.1.2", "Windows", vec![(21, "ftp", "FileZilla"), (22, "ssh", "OpenSSH"), (25, "smtp", "Postfix"), (80, "http", "IIS 10.0")]),
        ("192.168.1.3", "Linux", vec![(80, "http", "Nginx 1.18"), (8080, "http-proxy", "Squid 4.6")]),
    ];
    
    println!("Generating HTML report for {} hosts...", scan_results.len());
    
    // Generate HTML report
    let html_report = format!(
        r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>cyNetMapper Scan Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
        h1 {{ color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }}
        .summary {{ background-color: #ecf0f1; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .host {{ margin: 20px 0; border: 1px solid #bdc3c7; border-radius: 5px; overflow: hidden; }}
        .host-header {{ background-color: #34495e; color: white; padding: 10px; font-weight: bold; }}
        .host-info {{ padding: 10px; background-color: #ecf0f1; }}
        .ports-table {{ width: 100%; border-collapse: collapse; margin: 10px 0; }}
        .ports-table th, .ports-table td {{ border: 1px solid #bdc3c7; padding: 8px; text-align: left; }}
        .ports-table th {{ background-color: #3498db; color: white; }}
        .port-open {{ background-color: #2ecc71; color: white; font-weight: bold; }}
        .footer {{ margin-top: 30px; text-align: center; color: #7f8c8d; font-size: 12px; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç cyNetMapper Scan Report</h1>
        
        <div class="summary">
            <h2>üìä Scan Summary</h2>
            <p><strong>Scan Date:</strong> {}</p>
            <p><strong>Total Hosts Scanned:</strong> {}</p>
            <p><strong>Hosts Up:</strong> {}</p>
            <p><strong>Total Open Ports:</strong> {}</p>
        </div>
        
        <h2>üñ•Ô∏è Host Details</h2>
        {}
        
        <div class="footer">
            <p>Generated by cyNetMapper v1.0 | {}</p>
        </div>
    </div>
</body>
</html>"#,
        chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC"),
        scan_results.len(),
        scan_results.len(),
        scan_results.iter().map(|(_, _, ports)| ports.len()).sum::<usize>(),
        scan_results
            .iter()
            .map(|(host, os, ports)| format!(
                r#"<div class="host">
            <div class="host-header">üñ•Ô∏è Host: {}</div>
            <div class="host-info">
                <p><strong>Operating System:</strong> {}</p>
                <p><strong>Open Ports:</strong> {}</p>
            </div>
            <table class="ports-table">
                <thead>
                    <tr>
                        <th>Port</th>
                        <th>State</th>
                        <th>Service</th>
                        <th>Version</th>
                    </tr>
                </thead>
                <tbody>
{}
                </tbody>
            </table>
        </div>"#,
                host,
                os,
                ports.len(),
                ports
                    .iter()
                    .map(|(port, service, version)| format!(
                        "                    <tr>\n                        <td>{}</td>\n                        <td class=\"port-open\">OPEN</td>\n                        <td>{}</td>\n                        <td>{}</td>\n                    </tr>",
                        port, service, version
                    ))
                    .collect::<Vec<_>>()
                    .join("\n")
            ))
            .collect::<Vec<_>>()
            .join("\n\n        "),
        chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
    );
    
    println!("\nHTML report generated successfully!");
    println!("Report length: {} characters", html_report.len());
    println!("\nHTML report preview (first 500 characters):");
    println!("{}", &html_report[..500.min(html_report.len())]);
    println!("...");
    
    // In a real implementation, this would save to a file
    println!("\nüíæ Report would be saved to: scan_report_{}.html", chrono::Utc::now().format("%Y%m%d_%H%M%S"));
    
    Ok(())
}