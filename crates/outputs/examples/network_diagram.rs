//! Network diagram example for cyNetMapper
//! 
//! This example demonstrates network topology diagram generation.

use cynetmapper_outputs::*;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Network diagram example");
    
    // Example network topology data
    let network_nodes = vec![
        ("192.168.1.1", "Router", vec!["192.168.1.2", "192.168.1.3", "192.168.1.4"]),
        ("192.168.1.2", "Web Server", vec!["192.168.1.5"]),
        ("192.168.1.3", "Database Server", vec![]),
        ("192.168.1.4", "File Server", vec!["192.168.1.6"]),
        ("192.168.1.5", "Load Balancer", vec!["192.168.1.7", "192.168.1.8"]),
        ("192.168.1.6", "Backup Server", vec![]),
        ("192.168.1.7", "App Server 1", vec![]),
        ("192.168.1.8", "App Server 2", vec![]),
    ];
    
    println!("Generating network diagram for {} nodes...", network_nodes.len());
    
    // Generate Graphviz DOT format
    let dot_diagram = format!(
        r#"digraph NetworkTopology {{
    rankdir=TB;
    node [shape=box, style=filled, fontname="Arial"];
    edge [fontname="Arial", fontsize=10];
    
    // Node definitions
{}
    
    // Edge definitions
{}
    
    // Styling
    {{rank=same; "192.168.1.7"; "192.168.1.8";}}
    
    label="Network Topology - Generated by cyNetMapper\n{}";
    labelloc=t;
    fontsize=16;
    fontname="Arial Bold";
}}
"#,
        network_nodes
            .iter()
            .map(|(ip, role, _)| {
                let color = match role {
                    r if r.contains("Router") => "lightblue",
                    r if r.contains("Server") => "lightgreen",
                    r if r.contains("Balancer") => "lightyellow",
                    _ => "lightgray",
                };
                format!("    \"{}\" [label=\"{} \\n({})\", fillcolor={}];", ip, role, ip, color)
            })
            .collect::<Vec<_>>()
            .join("\n"),
        network_nodes
            .iter()
            .flat_map(|(source, _, connections)| {
                connections.iter().map(move |target| {
                    format!("    \"{}\" -> \"{}\" [label=\"connects\"];", source, target)
                })
            })
            .collect::<Vec<_>>()
            .join("\n"),
        chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
    );
    
    println!("\nGraphviz DOT diagram generated:");
    println!("{}", dot_diagram);
    
    // Generate ASCII network diagram
    println!("\n\nASCII Network Diagram:");
    println!("┌─────────────────────────────────────────────────────────────┐");
    println!("│                    Network Topology                        │");
    println!("├─────────────────────────────────────────────────────────────┤");
    println!("│                                                             │");
    println!("│         ┌─────────────┐                                     │");
    println!("│         │   Router    │                                     │");
    println!("│         │192.168.1.1  │                                     │");
    println!("│         └──────┬──────┘                                     │");
    println!("│                │                                            │");
    println!("│     ┌──────────┼──────────┐                                │");
    println!("│     │          │          │                                │");
    println!("│ ┌───▼───┐  ┌───▼───┐  ┌───▼───┐                            │");
    println!("│ │Web Srv│  │DB Srv │  │File   │                            │");
    println!("│ │.1.2   │  │.1.3   │  │Srv.1.4│                            │");
    println!("│ └───┬───┘  └───────┘  └───┬───┘                            │");
    println!("│     │                      │                                │");
    println!("│ ┌───▼───┐              ┌───▼───┐                            │");
    println!("│ │Load   │              │Backup │                            │");
    println!("│ │Bal.1.5│              │Srv.1.6│                            │");
    println!("│ └───┬───┘              └───────┘                            │");
    println!("│     │                                                       │");
    println!("│ ┌───┴───┐                                                   │");
    println!("│ │       │                                                   │");
    println!("│ ▼       ▼                                                   │");
    println!("│┌─────┐ ┌─────┐                                              │");
    println!("││App1 │ │App2 │                                              │");
    println!("││.1.7 │ │.1.8 │                                              │");
    println!("│└─────┘ └─────┘                                              │");
    println!("│                                                             │");
    println!("└─────────────────────────────────────────────────────────────┘");
    
    println!("\n📊 Network Statistics:");
    println!("• Total Nodes: {}", network_nodes.len());
    println!("• Total Connections: {}", network_nodes.iter().map(|(_, _, conn)| conn.len()).sum::<usize>());
    println!("• Network Depth: 4 levels");
    
    println!("\n💾 Diagram files would be saved as:");
    println!("• network_topology.dot (Graphviz format)");
    println!("• network_topology.png (PNG image)");
    println!("• network_topology.svg (SVG vector)");
    
    Ok(())
}